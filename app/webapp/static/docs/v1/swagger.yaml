openapi: 3.0.3
info:
  title: Caribbean Wallet Documentation
  description: |-
    Caribbean Wallet is a mobile wallet platform
    based on e-Banking domain. It provides to it's account holders, in addition to the classic services of a Wallet focused on the purchase and sale of products and services anywhere in the world, savings and checking accounts, as well as debit and credit cards (Visa and Master Card). virtual or physical, which can be recharged through other Wallet platforms and associated Banks of any field.

    This is the backend documentation of the Caribbean Wallet application developed in python
    using the Flask framework. The REST API standard is followed as a communication interface 
    between information systems, through the hypertext transfer protocol (HTTP).
    To obtain data or execute operations on the data, the JSON format is used.
    
  termsOfService: https://www.termsofservicegenerator.net/live.php?token=Q7AjipvSRCSokjzBi5S5rkBgIMyiRjuu
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Caribbean Wallet
  url: /docs
tags:
  - name: User
    description: Control and management of application users
  - name: Role
    description: Predefined category that can be assigned to users on the basis of their job or other criteria.
  - name: UserAccount
    description: Account owned by a user.
  - name: UserTransaction
    description: Transactions done by a user.
paths:

  # Users Paths
  /api/user:
    get:
      tags:
        - User
      summary: Get all users
      description: List all stored users on database
      operationId: getAllUsers
      parameters:
        - name: page_size
          in: query
          description: Number of elements per page
          schema:
            type: integer
            default: 10
        - name: page_number
          in: query
          description: Index for actual page
          schema:
            type: integer
            default: 3
        - name: sort_by
          in: query
          description: Fild name to sort by
          schema:
            type: string
            example: id
        - name: sort_order
          in: query
          description: Sort criteria
          schema:
            type: string
            default: asc
            enum:
              - asc
              - desc
        - name: <fild Name>
          in: query
          description: The arguments for the searches are taken 
            from the query params. These vary according to the fields that have the model.
          schema:
            type: string
        
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  next_page:
                    type: integer
                    example: 3
                  prev_page:
                    type: integer
                    example: 1
                  item_count:
                    type: integer
                    example: 1
                  total_items:
                    type: integer
                    example: 1
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'

        '404':
          description: No Users found
    
    post:
      tags:
        - User
      summary: Add a new user to the database
      description: Add a new user to the database
      operationId: addUser
      requestBody:
        description: Create a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: 
                    type: integer
                    example: 2 
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request

  /api/user/{user_id}:
    get:
      tags:
        - User
      summary: Get user by id
      description: Get user by id
      operationId: getUserById
      parameters:
        - in: path
          name: user_id
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

        '404':
          description: User not found
          
    put:
      tags:
        - User
      summary: Update user by id
      description: Update user data by id
      operationId: updateUser
      parameters:
        - in: path
          name: user_id
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update user by id
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    description: User updated id
                    type: integer
                    example: 2 
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request

    delete:
      tags:
        - User
      summary: Delete user
      description: Delete user by id
      operationId: deleteUserById
      parameters:
        - name: user_id
          in: path
          description: ID of user to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: User not found

  # Roles Paths
  /api/role:
    get:
      tags:
        - Role
      summary: Get all Roles
      description: List all stored roles on database
      operationId: getAllRoles
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  next_page:
                    type: integer
                    example: 3
                  prev_page:
                    type: integer
                    example: 1
                  item_count:
                    type: integer
                    example: 1
                  total_items:
                    type: integer
                    example: 1
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'

        '404':
          description: No Roles found
    
    post:
      tags:
        - Role
      summary: Add a new role to the database
      description: Add a new role to the database
      operationId: addRole
      requestBody:
        description: Create a new role
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
          application/xml:
            schema:
              $ref: '#/components/schemas/Role'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: 
                    type: integer
                    example: 2 
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
    
  /api/role/{role_id}:
    get:
      tags:
        - Role
      summary: Get role by id
      description: Get role by id
      operationId: getRoleById
      parameters:
        - in: path
          name: role_id
          description: ID of role to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'

        '404':
          description: Role not found
    
    put:
      tags:
        - Role
      summary: Update role by id
      description: Update role data by id
      operationId: updateRole
      parameters:
        - in: path
          name: role_id
          description: ID of role to return
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update role by id
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
          application/xml:
            schema:
              $ref: '#/components/schemas/Role'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    description: Role updated id
                    type: integer
                    example: 2 
            application/xml:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          description: Bad Request

    delete:
      tags:
        - Role
      summary: Delete role
      description: Delete role by id
      operationId: deleteRoleById
      parameters:
        - name: role_id
          in: path
          description: ID of role to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: Role not found

# Account Holder Paths
  /api/account_holder:
    get:
      tags:
        - AccountHolder
      summary: Retrieve a list of account holders
      responses:
        '200':
          description: A list of account holders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountHolder'
    post:
      tags:
        - AccountHolder
      summary: Create a new account holder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Create_Account_Holder_Schema'
      responses:
        '201':
          description: The created account holder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountHolder'
  
  /api/account_holder/{account_holder_id}:
    get:
      tags:
        - AccountHolder
      summary: Retrieve an account holder by ID
      parameters:
        - in: path
          name: account_holder_id
          required: true
          schema:
            type: integer
          description: The ID of the account holder to retrieve
      responses:
        '200':
          description: The requested account holder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountHolder'
    put:
      tags:
        - AccountHolder
      summary: Update an existing account holder by ID
      parameters:
        - in: path
          name: account_holder_id
          required: true
          schema:
            type: integer
          description: The ID of the account holder to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Create_Account_Holder_Schema'
      responses:
        '200':
          description: The updated account holder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountHolder'
    delete:
      tags:
        - AccountHolder
      summary: Delete an existing account holder by ID
      parameters:
        - in: path
          name: account_holder_id
          required: true
          schema:
            type: integer
          description: The ID of the account holder to delete
      responses:
        '204':
          description: The account holder was successfully deleted          
          
  /api/user_account:
    get:
      tags:
        - UserAccount
      summary: Get all accounts associated with the current user.
      description: List all stored accounts owned by the current user on the database.
      operationId: getAllUsersAccounts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  corriente:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    example: ["32218104000000000000"]
                  ahorro:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserAccount'
                    example: ["32218100000000000000"]
        '401':
          description: The user is not logged
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: No se ha iniciado sesión.
                    
  /api/user_transactions:
    post:
      tags:
        - UserTransaction
      summary: Transfer money between two wallets.
      description: Make transactions between two wallets.
      operationId: makeTransaction
      parameters:
        - name: origin
          in: query
          description: Number of the user account that will transfer the money.
          schema:
            type: integer
            example: 32218100000000000000
        - name: destination
          in: query
          description: Number of the user account that will receive the money.
          schema:
            type: integer
            example: 32218100000000000000
        - name: amount
          in: query
          description: Amount of money to be transferred.
          schema:
            type: number
            example: 152.55
        - name: transaction_type
          in: query
          description: Name of the wallet that will receive the money.
          schema:
            type: string
            example: Paypal
        - name: currency
          in: query
          description: Id of the currency on the database.
          schema:
            type: integer
            example: 1
        - name: description
          in: query
          description: Description of the transaction input by the user.
          schema:
            type: string
            example: Money for shoes.
        - name: status
          in: query
          description: Status of the transaction. 1 is for done, 3 is for cancelled.
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Se ha realizado la transferencia.
                  transaction_id:
                    type: integer
                    example: 2
        '401':
          description: The user is not logged
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: No se ha iniciado sesión.
        '500':
          description: Exception handler that will catch errors during the transaction.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: La cuenta de origen no existe
    get:
      tags:
        - UserTransaction
      summary: Look for all the transactions done by an user.
      description: Return all the transactions done by an user.
      operationId: madeTransactions
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  transactions:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserTransaction'
                    example: [
                              {
                                  "origin": 32238100000000000000,
                                  "destination": 32218100000000000000,
                                  "amount": 5000.0,
                                  "transaction_type": "Paypal",
                                  "transaction_date": "06/19/2023, 00:00:12",
                                  "currency": "dolar",
                                  "status": 1
                              }
                              ]
        
        '401':
          description: The user is not logged
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: No se ha iniciado sesión.
        '400':
          description: The current user has not made any transactions.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: No se ha realizado ninguna transferencia.
                    
  /api/user_transactions/{transaction_id}:
    put:
      tags:
        - UserTransaction
      summary: Revert a transaction.
      description: Cancel the transaction knowing its id.
      operationId: cancelTransaction
      parameters:
        - in: path
          name: transaction_id
          description: Id of the transaction.
          required: true
          schema:
            type: integer
            example: 20
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Se ha cancelado la transferencia.
                  transaction_id:
                    type: integer
                    example: 2
        '401':
          description: The user is not logged
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: No se ha iniciado sesión.
        '400':
          description: The user trying to cancel the transaction didn't made it from their account.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: La transferencia solo puede ser cancelada por el usuario que la realizó.
        '500':
          description: Exception handler that will catch errors during the transaction.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: La moneda no existe en la base de datos
                    
components:
  schemas:
    User:
      required:
        - login
        - password
        - name
        - lastname
        - role_id
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        login:
          type: string
          example: jamesjason@gmail.com
        password:
          type: string
          example: 'A#12345mk3'
        name:
          type: string
          example: James
        lastname:
          type: string
          example: Jason
        user_type:
          type: string
          example: 'user'
          enum:
            - user
            - tipo 1
            - tipo 2
        role_id:
          type: integer
          format: int64
          example: 3
      xml:
        name: user
    Role:
      required:
        - description
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        description:
          type: string
          example: admin
      xml:
        name: role

    AccountHolder:
      required:
        - id_number
        - gender
        - civil_status
        - birthdate
        - phone
        - nationality
        - street
        - sector
        - city
        - country       
        - province
        - township
        - address
        - employer_name
        - employer_rif        
        - employer_phone        
        - employer_city
        - employer_country        
        - employer_province
        - employer_township
        - employer_address
      type: object
      properties:
        password:
          type: string
          minLength: 6
          maxLength: 20
          description: The password for the account holder. Optional.
        user_id:
          type: integer
          description: The user ID for the account holder. Optional.
        id:
          type: integer
          description: The ID for the account holder. Optional.
        id_number:
          type: string
          description: The ID number for the account holder. Required.
        gender:
          type: string
          description: The gender of the account holder. Required.
        civil_status:
          type: string
          description: The civil status of the account holder. Required.
        birthdate:
          type: string
          description: The birthdate of the account holder. Required.
        phone:
          type: string
          description: The phone number of the account holder. Required.
        nationality:
          type: string
          minLength: 3
          maxLength: 30
          description: The nationality of the account holder. Required.
        street:
          type: string
          minLength: 3
          maxLength: 50
          description: The street of the account holder's address. Required.
        sector:
          type: string
          minLength: 3
          maxLength: 50
          description: The sector of the account holder's address. Required.
        city:
          type: string
          minLength: 3
          maxLength: 50 
          description: The city of the account holder's address. Required.
        country:
          type: string 
          description: The country of the account holder's address. Required.
        province:
          type: string 
          minLength: 3 
          maxLength: 20 
          description: The province of the account holder's address. Required.
        township:
          type: string 
          minLength: 3 
          maxLength: 20 
          description: The township of the account holder's address.Required.
        address :
          type: string 
          minLength: 3 
          maxLength: 150 
          description: The full address of the account holder.Required.
        employer_name :
          type: string 
          minLength: 3 
          maxLength: 50 
          description: The name of the account holder's employer.Required.
        employer_rif :
          type: string 
          description: The RIF (tax identification number) of the account holder's employer.Required.
        employer_phone :
          type: string 
          description: The phone number of the account holder's employer.Required.
        employer_city :
          type: string 
          minLength: 3 
          maxLength: 50 
          description: The city where the account holder's employer is located.Required.
        employer_country :
          type: string 
          description: The country where the account holder's employer is located.Required.
        employer_province :
          type: string 
          minLength: 3 
          maxLength: 20 
          description: The province where the account holder's employer is located.Required.
        employer_township :
          type: string 
          minLength: 3 
          maxLength: 20 
          description: The township where the account holder's employer is located.Required.
        employer_address :
          type: string 
          minLength: 3 
          maxLength: 150 
          description: The full address of the account holder's employer.Required.
      xml:
        name: account_holder
        
    UserTransaction:
      required:
        - user_id
        - origin_account
        - destination_account
        - amount
        - transaction_type
        - transaction_date
        - transaction_description
        - currency_id
        - transaction_status_id
        - status
      type: object
      properties:
        user_id:
          type: integer
          example: 1
        origin_account:
          type: integer
          example: 20
        destination_account:
          type: integer
          example: 100
        amount:
          type: number
          example: 120.45
        transaction_type:
          type: string
          example: Binance
        transaction_description:
          type: string
          example: Pago de servicios.
        currency_id:
          type: integer
          format: int64
          example: 3
        status:
          type: integer
          format: int64
          example: 3
      xml:
        name: user_transaction
        
    UserAccount:
      required:
        - user_id
        - account_number
        - account_type_id
      type: object
      properties:
        user_id:
          type: integer
          example: 1
        account_number:
          type: integer
          example: 32218100000000000000
        account_type_id:
          type: integer
          example: 1
      xml:
        name: user_account
